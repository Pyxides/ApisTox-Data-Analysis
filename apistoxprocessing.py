# -*- coding: utf-8 -*-
"""ApisToxProcessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t8Xri3W5e_VwfpY1-jNMMfwzBY56PSYM
"""

import pandas as pd

apistox = pd.read_csv('dataset_final.csv')

apistox

#PPDB = pesticides properties database;
#PPDB levels: 0 = safe, 1 = moderately toxic, 2 = highly toxic, i
#BPDB = bio pesticides database
#Dataset has no missing values
#other_agrochemical = not herbicide/fungicide/insecticide
#labeling done per EPA guidelines; "label" : 0 = non-toxic, 1 = toxic (toxic to bees)
# considered toxic if ppdb_level > 0
#CAS = Chemical Abstracts Service, division of American Chemical Society
#CID = PubMeds Compound Identification
#SMILES = Simplified Molecular Input Line Entry System
#toxicity_type: highest level of toxicity taken, can have multiple toxicity types but only labeled with max toxicity_type
# (i.e. contact; ppdb level = 2, oral; ppdb level = 1 labeled as toxicity_type contact, ppdb level = 2)
apistox.info()

#Toxicity type counts
apistox['toxicity_type'].value_counts()

#Toxicity type proportions
apistox['toxicity_type'].value_counts(normalize=True)

apistox

#number of entries where "toxicity_type" = "contact" and "label" = 1
toxic_count = len(apistox[(apistox['toxicity_type'] == 'Contact') & (apistox['label'] == 1)])
toxic_count

'''
None of the chemicals with contact toxicity were toxic to bees. All were labeled as non-toxic.
May still be toxic but not to a dangerous degree.
'''

len(apistox[(apistox['toxicity_type'] == 'Oral') & (apistox['label'] == 1)])

len(apistox[(apistox['toxicity_type'] == 'Other') & (apistox['label'] == 1)])

#set dataframe "oral_toxicity" = only entries where "toxicity_type" = "oral" & "label" = 1
oral_toxicity = apistox[(apistox['toxicity_type'] == 'Oral') & (apistox['label'] == 1)]

#oral_toxicity sortby descending values in ppdb_level
oral_toxicity.sort_values(by='ppdb_level', ascending=False)

# oral_toxicity, only entries with "other_agrochemical" = 1
other_agrochem_oral = oral_toxicity[oral_toxicity['other_agrochemical'] == 1]
other_agrochem_oral
'''
All chemicals labeled as "other_agrochemical" only had that use,
 i.e. they did no have a multi-purpose use like also functioning as an herbicide, insecticide, or fungicide.
'''

# oral_toxicity, proportions of ("herbicides" = 1 & "fungcide" = 1 & "insecticide" = 1)
triplex_oral = oral_toxicity[(oral_toxicity['herbicide'] == 1) & (oral_toxicity['fungicide'] == 1) & (oral_toxicity['insecticide'] == 1)]
triplex_oral

# ("herbicide" = 1 & "fungicide" = 1)
herb_fung_oral = oral_toxicity[(oral_toxicity['herbicide'] == 1) & (oral_toxicity['fungicide'] == 1)]
herb_fung_oral

# ("herbicide" = 1 & "insectcide" = 1)
herb_insect_oral = oral_toxicity[(oral_toxicity['herbicide'] == 1) & (oral_toxicity['insecticide'] == 1)]
herb_insect_oral

# ("fungicide" = 1 & "insecticide" = 1)
fung_insect_oral = oral_toxicity[(oral_toxicity['fungicide'] == 1) & (oral_toxicity['insecticide'] == 1)]
fung_insect_oral

'''
Among orally toxic chemicals onle one had multiple uses, all other entries had one use among the 3:
entry 54, CID 10788/CAS 533-74-4
'''

# other_toxicity = "toxicity_type" = "Other" & "label" = 1
other_toxicity = apistox[(apistox['toxicity_type'] == 'Other') & (apistox['label'] == 1)]

other_toxicity.head()

#count of "herbicide" = 1 in other_toxicity
other_toxicity.loc[other_toxicity['herbicide'] == 1]

#count of "fungicide" = 1 in other_toxicity
other_toxicity['fungicide'].value_counts()

#count of "insecticide" = 1 other_toxicity
other_toxicity['insecticide'].value_counts()

#checking for multipurpose chemicals "herbicide" = 1 & "fungicide" = 1 & "insecticide" = 1 etc. in "toxicity_type" = "Contact"
triplex_other = other_toxicity[(other_toxicity['herbicide'] == 1) & (other_toxicity['fungicide'] == 1) & (other_toxicity['insecticide'] == 1)]
triplex_other

# other_toxicity,
herb_fung_other = other_toxicity[(other_toxicity['herbicide'] == 1) & (other_toxicity['fungicide'] == 1)]
herb_fung_other

# ("herbicide" = 1 & "insectcide" = 1)
herb_insect_other = other_toxicity[(other_toxicity['herbicide'] == 1) & (other_toxicity['insecticide'] == 1)]
herb_insect_other

# ("fungicide" = 1 & "insecticide" = 1)
fung_insect_other = other_toxicity[(other_toxicity['fungicide'] == 1) & (other_toxicity['insecticide'] == 1)]
fung_insect_other

import seaborn as sns

#plot distribution of toxicity_type against ppdb_level, histogram, only show ppdb levels on x-axis, 0, 1, 2
sns.displot(data=apistox, discrete=True, x='ppdb_level', hue='toxicity_type', multiple='dodge', shrink= .33)
'''
Contact toxicity seems to be the most common type of toxicity among all chemicals. Second is oral toxicity with 'other', miscellaneous types of toxicity in the minority, making up the smallest proportion.
For all three the highest proportion was found at a ppdb level of 1 with contact being the leader by a large margin.
'''

#distribution of herbicide=1, fungicide=1, insecticide=1, and other_agrochemical=1
herbicide = apistox['herbicide'].value_counts()
fungicide = apistox['fungicide'].value_counts()
insecticide = apistox['insecticide'].value_counts()

#plot chemical type(herbicide, fungicide, insecticide) against ppdb_level
#herbicide
sns.displot(data=apistox, discrete=True, x='ppdb_level', hue='herbicide', multiple='dodge', shrink= .33)
'''
Herbicides make up the largest proportion of toxic chemicals, with more than 250 at a ppdb level of 1, which is moderately toxic but not lethal.
Despite this herbicides accounted for a very small portion of chemicals with the highest level of toxicity, ppdb level 2.
'''

#fungicide vs ppdb_level
sns.displot(data=apistox, discrete=True, x='ppdb_level', hue='fungicide', multiple='dodge', shrink= .33)
'''
Most Fungicides are only moderately toxic to bees, with the fast majority of them being at a ppdb_level of 1,
very few are level 2 and a small minority are level 0.
'''

#insecticide vs ppdb_level
sns.displot(data=apistox, discrete=True, x='ppdb_level', hue='insecticide', multiple='dodge', shrink= .33)
'''
Insecticides are predictable more toxic to bees than the other types of agrochemicals;
 the proportion of insecticides that are toxic increases with ppdb_level until.
'''

#other_agrochemical vs ppdb_level
sns.displot(data=apistox, discrete=True, x='ppdb_level', hue='other_agrochemical', multiple='dodge', shrink= .33)
'''
The proportion of 'other_agrochemical' chemicals that are toxic are concentrated at a ppdb level of 1,
but the proportion of them still remains small even there, and smaller still at both higher and lower levels of toxicity
with the smallest proportion of them being at a ppdb level of 2
'''

#only show data with a label value of 1 and sort by ascending value of year
toxic_chems = apistox[apistox['label'] == 1]

#break toxic chem into 3
#one section for entries with a year < 1900
#second section for entries with a year > 1899 AND year < 2000
#third section for entries with year > 1999
century19 = toxic_chems[toxic_chems['year'] < 1900]
century20 = toxic_chems[(toxic_chems['year'] >= 1900) & (toxic_chems['year'] < 2000)]
century21 = toxic_chems[toxic_chems['year'] >= 2000]

#count of each century
print(len(century19))
print(len(century20))
print(len(century21))

#calculate proportion of ppdb_level == 2 in century19
century19['ppdb_level'].value_counts(normalize=True)

#century20 proportions
century20['ppdb_level'].value_counts(normalize=True)

#plot proportion and distribution of ppdb_level in century21
century21['ppdb_level'].value_counts(normalize=True)

summary = apistox.groupby(['herbicide', 'insecticide', 'fungicide', 'other_agrochemical'])['label'].value_counts().unstack(fill_value=0)
print(summary)

